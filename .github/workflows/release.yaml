name: Build and release

on:
  push:
    tags: ['v*']

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots package

      # debug
      - run: git version
      - run: git branch
      - run: git tag
  
      - name: get semantic tag version and release notes from commit messages
        id: tag 
        run: |
          curtag=${GITHUB_REF_NAME}
          major_minor=$(echo "$curtag" | cut -d'.' -f1-2)
          patch=$(echo "$curtag" | cut -d'.' -f3)
          # avoid empty patch number
          [ -n "$patch" ] && ((patch--)) || patch=".x"
          prevtag="${major_minor}.${patch}"
          echo "" > body.log
          if git tag | grep $prevtag ; then
            git log -q ${curtag}...${prevtag} --pretty="- %s" -q --no-color >> body.log
          else
            git log --pretty="- %s" -q --no-color >> body.log
          fi
          line_count=$(cat body.log | wc -l)
          echo "curtag=$curtag" >> $GITHUB_OUTPUT
          echo "prevtag=$prevtag" >> $GITHUB_OUTPUT
          echo "line_count=$line_count" >> $GITHUB_OUTPUT
      # debug
      - run: echo curtag is ${{ steps.tag.outputs.curtag }}
      - run: echo prevtag is ${{ steps.tag.outputs.prevtag }}
      - run: echo line_count is ${{ steps.tag.outputs.line_count }}
      - run: cat body.log
  
      #  create Github release with release note from file and binary asset attached
      - uses: ncipollo/release-action@v1
        with:
          name: ${{ env.GITHUB_REF_NAME }}
          tag: ${{ env.GITHUB_REF_NAME }}
          artifacts: "target/*.jar"
          bodyFile: "body.log"
          token: ${{ secrets.GITHUB_TOKEN }}